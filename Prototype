#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

// Define structure for student record
typedef struct Student {
    int id;
    char name[50];
    int age;
    char major[50];
    float gpa;
    struct Student* next;
} Student;

// Function prototypes
Student* loadFromFile(const char* filename);
void saveToFile(const char* filename, Student* head);
Student* addStudent(Student* head, int id, const char* name, int age, const char* major, float gpa);
Student* deleteStudent(Student* head, int id);
Student* updateStudent(Student* head, int id, const char* name, int age, const char* major, float gpa);
void retrieveStudent(Student* head, int id);
void displayStudents(Student* head);
void freeList(Student* head);
int isDuplicateID(Student* head, int id);
void clearInputBuffer();

// Safe input function
int getIntInput(const char* prompt);
float getFloatInput(const char* prompt);
void getStringInput(const char* prompt, char* buffer, int size);

int main() {
    Student* head = NULL;
    int choice, id, age;
    float gpa;
    char name[50], major[50];

    // Load initial data from file
    head = loadFromFile("student_input.txt");

    // Main menu
    do {
        printf("\nStudent Record Management System\n");
        printf("1. Add Student\n");
        printf("2. Delete Student\n");
        printf("3. Update Student\n");
        printf("4. Retrieve Student\n");
        printf("5. Display All Students\n");
        printf("6. Save and Exit\n");
        printf("Enter your choice: ");
        choice = getIntInput("");

        switch (choice) {
            case 1:
                printf("Adding a new student...\n");
                id = getIntInput("Enter ID: ");
                if (isDuplicateID(head, id)) {
                    printf("Error: A student with ID %d already exists.\n", id);
                    break;
                }
                getStringInput("Enter Name: ", name, sizeof(name));
                age = getIntInput("Enter Age: ");
                getStringInput("Enter Major: ", major, sizeof(major));
                gpa = getFloatInput("Enter GPA: ");
                head = addStudent(head, id, name, age, major, gpa);
                break;
            case 2:
                id = getIntInput("Enter ID to delete: ");
                head = deleteStudent(head, id);
                break;
            case 3:
                id = getIntInput("Enter ID to update: ");
                getStringInput("Enter Updated Name: ", name, sizeof(name));
                age = getIntInput("Enter Updated Age: ");
                getStringInput("Enter Updated Major: ", major, sizeof(major));
                gpa = getFloatInput("Enter Updated GPA: ");
                head = updateStudent(head, id, name, age, major, gpa);
                break;
            case 4:
                id = getIntInput("Enter ID to retrieve: ");
                retrieveStudent(head, id);
                break;
            case 5:
                displayStudents(head);
                break;
            case 6:
                saveToFile("student_output.txt", head);
                printf("Data saved to file. Exiting...\n");
                break;
            default:
                printf("Invalid choice! Please try again.\n");
        }
    } while (choice != 6);

    // Free memory
    freeList(head);
    return 0;
}

// Check for duplicate IDs
int isDuplicateID(Student* head, int id) {
    Student* current = head;
    while (current) {
        if (current->id == id) {
            return 1;
        }
        current = current->next;
    }
    return 0;
}

// Clear input buffer
void clearInputBuffer() {
    while (getchar() != '\n');
}

// Safe integer input
int getIntInput(const char* prompt) {
    int value;
    char buffer[50];
    while (1) {
        printf("%s", prompt);
        if (fgets(buffer, sizeof(buffer), stdin)) {
            if (sscanf(buffer, "%d", &value) == 1) {
                return value;
            }
        }
        printf("Invalid input. Please enter an integer.\n");
    }
}

// Safe float input
float getFloatInput(const char* prompt) {
    float value;
    char buffer[50];
    while (1) {
        printf("%s", prompt);
        if (fgets(buffer, sizeof(buffer), stdin)) {
            if (sscanf(buffer, "%f", &value) == 1) {
                return value;
            }
        }
        printf("Invalid input. Please enter a float.\n");
    }
}

// Safe string input
void getStringInput(const char* prompt, char* buffer, int size) {
    printf("%s", prompt);
    if (fgets(buffer, size, stdin)) {
        buffer[strcspn(buffer, "\n")] = '\0'; // Remove trailing newline
    }
}

// Load data from file
Student* loadFromFile(const char* filename) {
    FILE* file = fopen(filename, "r");
    if (!file) {
        printf("Warning: Cannot open file %s. Starting with an empty list.\n", filename);
        return NULL;
    }
    Student* head = NULL;
    int id, age;
    float gpa;
    char name[50], major[50];
    while (fscanf(file, "%d,%49[^,],%d,%49[^,],%f", &id, name, &age, major, &gpa) == 5) {
        head = addStudent(head, id, name, age, major, gpa);
    }
    fclose(file);
    return head;
}

// Save data to file
void saveToFile(const char* filename, Student* head) {
    FILE* file = fopen(filename, "w");
    if (!file) {
        printf("Error: Cannot open file %s for writing.\n", filename);
        return;
    }
    Student* current = head;
    while (current) {
        fprintf(file, "%d,%s,%d,%s,%.2f\n", current->id, current->name, current->age, current->major, current->gpa);
        current = current->next;
    }
    fclose(file);
}

// Add a student
Student* addStudent(Student* head, int id, const char* name, int age, const char* major, float gpa) {
    Student* newStudent = (Student*)malloc(sizeof(Student));
    newStudent->id = id;
    strcpy(newStudent->name, name);
    newStudent->age = age;
    strcpy(newStudent->major, major);
    newStudent->gpa = gpa;
    newStudent->next = NULL;

    if (!head || gpa > head->gpa) {
        newStudent->next = head;
        return newStudent;
    }
    Student* current = head;
    while (current->next && current->next->gpa >= gpa) {
        current = current->next;
    }
    newStudent->next = current->next;
    current->next = newStudent;
    return head;
}

// Delete a student
Student* deleteStudent(Student* head, int id) {
    if (!head) {
        printf("No student records to delete.\n");
        return NULL;
    }
    if (head->id == id) {
        Student* temp = head;
        head = head->next;
        free(temp);
        printf("Student with ID %d deleted successfully.\n", id);
        return head;
    }
    Student* current = head;
    while (current->next && current->next->id != id) {
        current = current->next;
    }
    if (current->next) {
        Student* temp = current->next;
        current->next = current->next->next;
        free(temp);
        printf("Student with ID %d deleted successfully.\n", id);
    } else {
        printf("Student with ID %d not found.\n", id);
    }
    return head;
}

// Update a student
Student* updateStudent(Student* head, int id, const char* name, int age, const char* major, float gpa) {
    head = deleteStudent(head, id);
    head = addStudent(head, id, name, age, major, gpa);
    return head;
}

// Retrieve and display a student
void retrieveStudent(Student* head, int id) {
    Student* current = head;
    while (current) {
        if (current->id == id) {
            printf("ID: %d, Name: %s, Age: %d, Major: %s, GPA: %.2f\n",
                   current->id, current->name, current->age, current->major, current->gpa);
            return;
        }
        current = current->next;
    }
    printf("Student with ID %d not found.\n", id);
}

// Display all students
void displayStudents(Student* head) {
    if (!head) {
        printf("No student records to display.\n");
        return;
    }
    Student* current = head;
    while (current) {
        printf("ID: %d, Name: %s, Age: %d, Major: %s, GPA: %.2f\n",
               current->id, current->name, current->age, current->major, current->gpa);
        current = current->next;
    }
}

// Free memory
void freeList(Student* head) {
    Student* current = head;
    while (current) {
        Student* temp = current;
        current = current->next;
        free(temp);
    }
}
